class BasePage {
    constructor(firebaseApp) {
        this.firebaseApp = firebaseApp;
        this.htmlComponents = new HtmlComponents();
    }
    get components() {
        return this.htmlComponents;
    }
    get html() {
        throw new Error("not implemented");
    }
    initializeData() {}
    initializeFocus() {}
    initializeEvents() {}
    initializeHtml() {
        const mainElement = document.querySelector("main");
        if (!mainElement) {
            throw new Error("main element not found");
        }
        mainElement.innerHTML = this.html;
    }
    isPageMatch() {
        return false;
    }
    setFocusToFirstEmptyInputOrSubmit() {
        const element = document.querySelector('form input:placeholder-shown, form input[type="submit"]');
        if (element) {
            element.focus();
        }
    }
    setInputFromUrlParams() {
        const urlParams = new URLSearchParams(window.location.search);
        for (const entry of urlParams.entries()) {
            const element = document.getElementById(entry[0]);
            if (element) {
                element.value = entry[1];
            }
        }
    }
    show() {
        this.initializeHtml();
        this.initializeData();
        this.initializeFocus();
        this.initializeEvents();
    }
    showError(message, selector = "#error") {
        const element = document.querySelector(selector);
        if (element) {
            element.textContent = message;
        }
    }
}

const ajax = (callback, formElement, token) => {
    const method = formElement.getAttribute("method");
    const action = formElement.getAttribute("action");
    const body = {};
    formElement.querySelectorAll("[type=text],[type=password],[type=email],[type=hidden]").forEach(element => {
        const name = element.getAttribute("name");
        const value = element.value;
        body[name] = value;
    });
    ajaxPlain(method, action, callback, body, token);
};

const ajaxPlain = (method, action, callback, body, token) => {
    const xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4) {
            if (this.status < 300) {
                let json = {
                    success: true
                };
                if (this.responseText) {
                    json = JSON.parse(this.responseText);
                }
                callback(json);
            } else {
                callback();
            }
        }
    };
    xhttp.open(method, action, true);
    xhttp.setRequestHeader("Content-Type", "application/json");
    if (token) {
        xhttp.setRequestHeader("Authorization", `Bearer ${token}`);
    }
    xhttp.send(JSON.stringify(body));
};

class FirebaseApp {
    constructor() {
        const firebaseConfig = {
            apiKey: "AIzaSyBQY2rQeybMmjOgkBUgLtisklHfCcsvjDk",
            authDomain: "miracle-hides.firebaseapp.com",
            databaseURL: "https://miracle-hides-default-rtdb.firebaseio.com",
            projectId: "miracle-hides",
            storageBucket: "miracle-hides.appspot.com",
            messagingSenderId: "962188365368",
            appId: "1:962188365368:web:69a723bd1e8bc7f77920cd"
        };
        firebase.initializeApp(firebaseConfig);
    }
    signIn(customToken) {
        this.customToken = customToken;
        firebase.auth().signInWithCustomToken(customToken).then(() => console.log("we have a firebase token")).catch(() => document.querySelector("#error").textContent = "A signin is not possible at the moment.");
    }
}

const showPage = (html, initialize) => {
    const oldCursor = document.body.style.cursor;
    document.body.style.cursor = "wait";
    document.querySelector("main").innerHTML = html;
    initialize().catch(err => console.log(err)).finally(() => document.body.style.cursor = oldCursor);
};

class HtmlComponents {
    defaultPage(header, errorId, method, action, formId, ...inner) {
        return `
      <h1>${header}</h1>
      <div id='${errorId}'/>
      <form method='${method}' action='${action}' id='${formId}'>
        ${inner.join("")}
      </form>
    `;
    }
    email(id = "email", name = id, required = true) {
        const requiredTag = required ? " required " : "";
        return `
      <label for='${id}'>email</label>
      <input type='email' id='${id}' name='${name}' maxlength='50' placeholder='name@example.com' ${requiredTag}>
    `;
    }
    submit(value, type = "submit") {
        return `<input type='${type}' value='${value}'/>`;
    }
}

class ListInvitationsAdminPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
        this.invitatonsListId = "invitatonsList";
        this.createInvitationId = "createInvitation";
    }
    get html() {
        return `
      <h1>Invitations!</h1>
      <ul id='${this.invitatonsListId}'></ul>
      <div>
        <form method='post' action='/invitation-code' id='${this.createInvitationId}'>
          <input type='submit' value='create new'/>
        </form>
      </div>
      `;
    }
    createInvitationElement({
        code,
        active,
        newElement = true
    }) {
        const cssClass = newElement ? "new" : "";
        const html = `
      <li id='li_${code}' class='${cssClass}'>
        <div>${code}</div>
        <div>${active}</div>
        <div>
          <form class='delete' action='/invitation-code' method='delete' id='${code}'>
            <input type='hidden' id='code' name='code' value='${code}'/>
            <input type='submit' value='delete' />
          </form>
          <form class='copy' code='${code}'>
            <input type='submit' value='copy'/>
          </form>
        </div>
      </li>`;
        let element = document.createElement("div");
        element.innerHTML = html;
        element.querySelector("form.delete").addEventListener("submit", e => {
            e.preventDefault();
            const process = json => {
                if (json && json.success) {
                    document.getElementById(`li_${e.target.id}`).remove();
                }
            };
            ajax(process, e.target);
        });
        element.querySelector("form.copy").addEventListener("submit", e => {
            e.preventDefault();
            const code = e.target.getAttribute("code");
            const result = new RegExp(/^(.*\.html).*$/, "i").exec(document.URL);
            let clipboard;
            if (result.length == 2) {
                clipboard = `${result[1]}?invitationCode=${code}`;
            } else {
                clipboard = code;
            }
            navigator.clipboard.writeText(clipboard);
        });
        return element.firstElementChild;
    }
    async initializeDataInvitations() {
        const process = json => {
            if (json && json.map) {
                const invitatonsList = document.getElementById(this.invitatonsListId);
                json.map(this.createInvitationElement).forEach(element => {
                    invitatonsList.appendChild(element);
                });
            }
        };
        ajaxPlain("get", "/invitation-code", process);
    }
    initializeData() {
        this.initializeDataInvitations().catch(err => console.log(err));
    }
    initializeEventCreateInvitation() {
        document.getElementById(this.createInvitationId).addEventListener("submit", e => {
            e.preventDefault();
            const process = json => {
                if (json) {
                    const element = this.createInvitationElement(json);
                    document.getElementById(this.invitatonsListId).appendChild(element);
                }
            };
            ajax(process, e.target);
        });
    }
    initializeEvents() {
        this.initializeEventCreateInvitation();
    }
}

class ListUsersAdminPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
        this.usersListId = "usersList";
    }
    get html() {
        return `
      <h1>Users</h1>
      <ul id='${this.usersListId}'></ul>
    `;
    }
    createUserElement(data) {
        const {
            displayName,
            forcePasswordChange,
            isLocked,
            lockedReason,
            signInAttemptFailures,
            userId,
            isEmailVerified
        } = data;
        const liElement = document.createElement("li");
        const content = `
      <div>${displayName}</div>
      <div>${forcePasswordChange}</div>
      <div>${isLocked}</div>
      <div>${lockedReason}</div>
      <div>${signInAttemptFailures}</div>
      <div>${userId}</div>
      <div>${isEmailVerified}</div>
      <div>
        <form class='delete' action='/user' method='delete' id='${userId}'>
          <input type='hidden' id='userId' name='userId' value='${userId}'/>
          <input type='submit' value='delete' />
        </form>
      </div>      
    `;
        liElement.innerHTML = content;
        liElement.querySelector("form").addEventListener("submit", e => {
            e.preventDefault();
            const process = json => {
                if (json && json.success) {
                    liElement.remove();
                }
            };
            ajax(process, e.target);
        });
        return liElement;
    }
    async initializeDataUsers() {
        const process = json => {
            if (json && json.users && json.users.map) {
                const usersList = document.getElementById(this.usersListId);
                json.users.map(this.createUserElement).forEach(element => {
                    usersList.appendChild(element);
                });
            }
        };
        ajaxPlain("get", "/user", process);
    }
    initializeData() {
        this.initializeDataUsers().catch(err => console.log(err));
    }
}

class AddChatMessengerPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
    }
    get html() {
        return this.components.defaultPage("Add Chat", "error", "post", "/chat", "formId", this.components.email(), this.components.submit("add"));
    }
}

class MessengerPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
    }
    get html() {
        return `
      <h1>Messenger!</h1>
      <div id="error"></div>
      <div>
        <ul id='chats'></ul>
        <form id='addChat' action='chat' method='post'>
          <input type='submit' value='add' />
        </form>
      </div>
      `;
    }
    initializeEventAddChat() {
        document.querySelector("#addChat").addEventListener("submit", e => {});
    }
    initializeEvents() {
        this.initializeEventAddChat();
    }
}

class SignInPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
    }
    get html() {
        return `
      <h1>Welcome back!</h1>
      <div id="error"></div>
      <form method="post" action="/auth" id="signin">
      <label for="email">email</label>
      <input type="email" id="email" name="email" maxlength='50' placeholder='name@example.com' required>
      <label for="password">password</label>
      <input type="password" id="password" name="password" minlength='8' maxlength='256' placeholder='your password' required>
          <input type="submit" value="submit">
      </form>
      <a id='signUpLink' href='signup'>I do not have an account!</a> 
      `;
    }
    initializeData() {
        this.setInputFromUrlParams();
    }
    initializeEventSignIn() {
        document.querySelector("#signin").addEventListener("submit", e => {
            e.preventDefault();
            document.querySelector("#error").textContent = "";
            const process = json => {
                if (json && json.token) {
                    firebase.auth().signInWithCustomToken(json.token).then(() => new MessengerPage(this.firebaseApp).show()).catch(() => document.querySelector("#error").textContent = "A signin is not possible at the moment.");
                } else {
                    document.querySelector("#error").textContent = "Unknown combination of user and password";
                }
            };
            ajax(process, e.target);
        });
    }
    initializeEventLinkToSignUp() {
        document.querySelector("#signUpLink").addEventListener("click", e => {
            e.preventDefault();
            new SignUpPage(this.firebaseApp).show();
        });
    }
    initializeEvents() {
        this.initializeEventLinkToSignUp();
        this.initializeEventSignIn();
    }
    initializeFocus() {
        this.setFocusToFirstEmptyInputOrSubmit();
    }
}

class SignUpPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
        this.invitationCodeId = "invitationCode";
    }
    get html() {
        return `
      <h1>Sign up for Miracle Hides!</h1>
      <div id='error'></div>
      <form action='/user' method='post'>
        <label for='${this.invitationCodeId}'>Invitation Code</label>
        <input type='text' id='${this.invitationCodeId}' name='${this.invitationCodeId}' maxlength='50' placeholder='acfc29b1-7ec5-4ac4-88c9-0f4ea83f8739' required autofocus>
        <label for="email">email</label>
        <input type="email" id="email" name="email" maxlength='50' placeholder='name@example.com' required>
        <label for="password">password</label>
        <input type="password" id="password" name="password" minlength='8' maxlength='256' placeholder='your password' required>
        <input type='submit' value='submit'>
      </form>
      <a id='signInLink' href='signin'>I already have an account!</a> 
    `;
    }
    initializeData() {
        this.setInputFromUrlParams();
    }
    initializeEventLinkToSignIn() {
        document.querySelector("#signInLink").addEventListener("click", e => {
            e.preventDefault();
            new SignInPage(this.firebaseApp).show();
        });
    }
    initializeEventSignUp() {
        document.querySelector("form").addEventListener("submit", e => {
            e.preventDefault();
            const process = json => {
                if (json && json.success === true) {
                    new VerifyEmailPage(this.firebaseApp).show();
                } else {
                    this.showError("Unable to sign up.");
                }
            };
            ajax(process, e.target);
        });
    }
    initializeEvents() {
        this.initializeEventLinkToSignIn();
        this.initializeEventSignUp();
    }
    initializeFocus() {
        this.setFocusToFirstEmptyInputOrSubmit();
    }
    isPageMatch() {
        const urlParams = [ ...new URLSearchParams(window.location.search) ];
        return urlParams.length === 1 && urlParams[0][0] && urlParams[0][0].toUpperCase() === this.invitationCodeId.toUpperCase();
    }
}

class VerifyEmailPage extends BasePage {
    constructor(firebaseApp) {
        super(firebaseApp);
        this.emailId = "email";
        this.verificationCodeId = "verificationCode";
    }
    get html() {
        return `
      <h1>Verify your email!</h1>
      <p>Check your inbox.</p>
      <div id="error"></div>
      <form method="put" action="/user">
        <label for="${this.emailId}">email</label>
        <input type="email" id="${this.emailId}" name="${this.emailId}" maxlength='50' placeholder='name@example.com' required>
        <label for="password">password</label>
        <input type="password" id="password" name="password" minlength='8' maxlength='256' placeholder='your password' required>
        <label for='${this.verificationCodeId}'>Email verification Code</label>
        <input type='text' id='${this.verificationCodeId}' name='${this.verificationCodeId}' maxlength='50' placeholder='acfc29b1-7ec5-4ac4-88c9-0f4ea83f8739' required autofocus>
        <input type="submit" value="submit">
      </form>
      `;
    }
    initializeData() {
        this.setInputFromUrlParams();
    }
    initializeEventVerifyEmail() {
        document.querySelector("form").addEventListener("submit", e => {
            e.preventDefault();
            const process = json => {
                if (json && json.token) {
                    new MessengerPage(this.firebaseApp).show();
                } else {
                    this.showError("Unable to verify email.");
                }
            };
            ajax(process, e.target);
        });
    }
    initializeEvents() {
        this.initializeEventVerifyEmail();
    }
    initializeFocus() {
        this.setFocusToFirstEmptyInputOrSubmit();
    }
    isPageMatch() {
        const urlParams = [ ...new URLSearchParams(window.location.search) ];
        const emailId = this.emailId.toUpperCase();
        const verificationCodeId = this.verificationCodeId.toUpperCase();
        return urlParams.length === 2 && urlParams.some(p => p[0] && p[0].toUpperCase() === emailId) && urlParams.some(p => p[0] && p[0].toUpperCase() === verificationCodeId);
    }
}

const firebaseApp = new FirebaseApp();

const pages = [ new SignUpPage(firebaseApp), new VerifyEmailPage(firebaseApp) ];

const index = pages.findIndex(page => page.isPageMatch());

if (index > -1) {
    pages[index].show();
} else {
    new ListInvitationsAdminPage(firebaseApp).show();
}